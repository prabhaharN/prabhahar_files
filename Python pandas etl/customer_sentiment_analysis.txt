import pandas as pd
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
nltk.download('vader_lexicon')
import matplotlib.pyplot as plt



customer_details = {
    'customer_id': [1, 2, 3, 4],
    'name': ['John Doe', 'Jane Smith', 'Alice Brown', 'Bob Johnson'],
    'email': ['john@example.com', 'jane@example.com', 'alice@example.com', 'bob@example.com'],
    'join_date': ['2021-01-15', '2020-07-22', '2019-03-10', '2022-11-01']
}

customer_df = pd.DataFrame(customer_details)
customer_df

products = {
    'product_id': [1, 2, 3, 4],
    'name': ['Smartphone XYZ', 'Laptop ABC', 'Headphones QWE', 'Smartwatch DEF'],
    'category': ['Electronics', 'Electronics', 'Accessories', 'Wearables'],
    'price': [699, 999, 199, 299]
}

product_df = pd.DataFrame(products)
product_df


reviews = {
    'review_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'customer_id': [1, 2, 3, 1, 4, 2, 3, 4, 1, 2],
    'product_id': [1, 2, 3, 4, 1, 3, 4, 2, 3, 1],
    'review_date': ['2023-01-10', '2023-01-15', '2023-01-20', '2023-01-25', '2023-01-30',
                    '2023-02-05', '2023-02-10', '2023-02-15', '2023-02-20', '2023-02-25'],
    'rating': [5, 4, 3, 2, 5, 2, 4, 4, 1, 5],
    'review_text': [
        "Excellent smartphone! Great performance and battery life.",
        "Very good laptop but a bit overpriced.",
        "Average headphones, sound quality is not as expected.",
        "The smartwatch is okay but has connectivity issues.",
        "Love this smartphone! Worth every penny.",
        "Not satisfied with the headphones, too expensive.",
        "Good smartwatch, useful features but a bit bulky.",
        "Solid performance from this laptop, very satisfied.",
        "Terrible headphones, broke after a week.",
        "Best smartphone on the market right now!"
    ]
}

df_reviews = pd.DataFrame(reviews)
df_reviews

sia = SentimentIntensityAnalyzer()

df_reviews['compound'] = df_reviews['review_text'].apply(lambda x: sia.polarity_scores(x)['compound'])

df_reviews['sentiment'] = df_reviews['compound'].apply(lambda x: 'Positive' if x > 0 else ('Negative' if x < 0 else 'Neutral'))


df_reviews



counts = df_reviews.groupby('sentiment')['customer_id'].count()
plt.bar(counts.index, counts.values, color=[ 'red','orange','green'])
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.title('Sentiment Counts')
plt.show()


product_id=df_reviews.groupby(['product_id','sentiment'])['customer_id'].count()
product_id

product_id_counts = product_id.unstack(fill_value=0)
product_id_counts.plot(kind='bar', stacked=False, color=['red','orange','green',])
plt.xlabel('Product ID')
plt.ylabel('Count')
plt.title('Sentiment Counts for Each Product')
plt.legend(title='Sentiment', labels=[ 'Negative','Netural','Positive'])
plt.show()

product_id_total_counts=product_id_counts.copy()
product_id_total_counts['total'] = product_id_counts['Positive'] + product_id_counts['Negative'] + product_id_counts['Neutral']
product_id_total_counts

product_id_total_counts.plot(kind='bar', stacked=False, color=['red','orange','green','blue'])
plt.xlabel('Product ID')
plt.ylabel('Count')
plt.title('Sentiment Counts for Each Product')
plt.legend(title='Sentiment', labels=[ 'Negative','Netural','Positive','Total'])
plt.show()


# Sentiment trends over time.
plt.figure(figsize=(10, 6))
plt.plot(df_reviews['review_date'], df_reviews['compound'], marker='o', linestyle='-', color='r')
plt.xlabel('Review Date')
plt.ylabel('Sentiment Score (Compound)')
plt.title('Sentiment Trends Over Time')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()



# Sentiment distribution.

positive_count = sum(score > 0 for score in df_reviews['compound'])
negative_count = sum(score < 0 for score in df_reviews['compound'])
neutral_count = len(df_reviews['compound']) - positive_count - negative_count

labels = ['Positive', 'Negative', 'Neutral']
sizes = [positive_count, negative_count, neutral_count]
colors = ['#66b3ff', '#ff9999', '#99ff99']

plt.figure(figsize=(6, 6))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
plt.title('Sentiment Distribution')
plt.axis('equal') 
plt.show()