Print the multiplication table of a number using nested loops.

num = int(input("Enter a positive integer (less than 10): "))

# Print the multiplication table
for i in range(1, num + 1):
    for j in range(1, 11):
        print(f"{i} * {j} = {i * j}")

Check if a number is present in a list using a while loop.

my_list = [1, 3, 5, 7, 9]
number_to_check = int(input("Enter a number: "))
i = 0
while i < len(my_list):
    if my_list[i] == number_to_check:
        print('Number is present')
        break
    i += 1
else:
    print('number is not present')


Generate a pattern of stars using nested loops.
Calculate the sum of even numbers from 1 to 50 using a for loop.

total = 0

for number in range(1, 50+1):
    if number % 2 == 0:
        total += number

print(f"The Sum of Even Numbers from 1 to {maximum} = {total}")

Print the reverse of a string using a for loop.

input_string = "Hello, World!"
reversed_string = ""

for i in input_string :
    reversed_string = i+reversed_string 

print("Original String:", input_string)
print("Reversed String:", reversed_string)


Control Statements:
21. Use a break statement to exit a loop when a specific condition is met.

number = 1
while number <= 10:
    print(number)
    if number == 5:
        break
    number += 1

Use a continue statement to skip even numbers in a loop.

for number in range(1, 11):
    if number % 2 == 0:
        continue 
    print(number)

Implement a switch case statement for a simple calculator.

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y != 0:
        return x / y
    else:
        return "Error: Division by zero"

operations = {
    '+': add,
    '-': subtract,
    '*': multiply,
    '/': divide
}

operator = input("Enter an operator (+, -, *, /): ")
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

if operator in operations:
    result = operationsoperator
    print(f"Result: {result}")
else:
    print("Invalid operator. Please enter +, -, *, or /.")

Check if a number is a perfect square using a loop and break statement.

def is_perfect_square(num):
    x = num // 2
    s = set([x])
    while x * x != num:
        x = (x + (num // x)) // 2
        if x in s:
            return False
        s.add(x)
    return True
for i in range(110, 130):
    print(i, is_perfect_square(i))


Create a menu-driven program using a while loop and switch case.

def calculate_circle_area(radius):
    return 3.14 * radius ** 2

def calculate_square_area(side):
    return side ** 2

def calculate_sphere_area(radius):
    return 4 * 3.14 * radius ** 2

def main():
    while True:
        print("1. Calculate area of circle")
        print("2. Calculate area of square")
        print("3. Calculate area of sphere")
        print("4. Exit")
        choice = input("Enter your choice (1/2/3/4): ")

        if choice == '1':
            radius = float(input("Enter the radius of the circle: "))
            print(f"Area of circle: {calculate_circle_area(radius)}")
        elif choice == '2':
            side = float(input("Enter the side length of the square: "))
            print(f"Area of square: {calculate_square_area(side)}")
        elif choice == '3':
            radius = float(input("Enter the radius of the sphere: "))
            print(f"Area of sphere: {calculate_sphere_area(radius)}")
        elif choice == '4':
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please select 1, 2, 3, or 4.")

if __name__ == "__main__":
    main()

Implement a program to guess a number using random numbers and a loop.

def number_guessing_game():
    target_number = random.randint(1,100)

    attempts = 0
    while True:
        guess = int(input(f"Guess a number between {lower_bound} and {upper_bound}: "))
        attempts += 1

        if guess == target_number:
            print(f"Congratulations! You guessed it in {attempts} attempts.")
            break
        elif guess < target_number:
            print("Too low! Try a higher number.")
        else:
            print("Too high! Try a lower number.")

if __name__ == "__main__":
    number_guessing_game()


Print the prime numbers in a given range using a loop and continue statement.

def is_prime(number):
    if number < 2:
        return False
    for divisor in range(2, int(number)- 1):
        if number % divisor == 0:
            return False
    return True

def print_primes_in_range(start, end):
    print(f"Prime numbers between {start} and {end}:")
    for num in range(start, end + 1):
        if not is_prime(num):
            continue 
        print(num, end=" ")

Use pass statement to create an empty loop.

for i in range(5):
    pass  

print("Loop completed")

Implement a program to find the roots of a quadratic equation.
Handle exceptions using try-except blocks for a user input program.

try:
    user_input = input("Enter a number: ")
    num = int(user_input)
    print("Your number doubled is:", num * 2)
except ValueError:
    print("Invalid input. Please enter a valid integer.")
finally:
    print("completed ")


Advanced Control Statements:
41. Implement a program for binary search using a while loop.

def binary_search(nums, target):
    low = 0
    high = len(nums) - 1

    while low <= high:
        middle = (low + high) // 2
        if nums[middle] == target:
            return middle
        elif nums[middle] < target:
            low = middle + 1 
        else:
            high = middle - 1 

    return 'number not in list' 

Use recursion to calculate the factorial of a number.

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

Implement a program to find the GCD (Greatest Common Divisor) using Euclidean algorithm.

def euclidean_gcd(a, b):
    while b:
        a, b = b, a % b
    return a
    
print(euclidean_gcd(7, 16)) 

Create a program to find the LCM (Least Common Multiple) of two numbers.

def lcm(x, y):
    if y>x:
        h=y % x
    else:    
        h=x % y
    lcm = (x * y) // h
    return lcm 
    
    
print(lcm(14, 6))

Implement a program to check if a number is Armstrong or not.

def is_armstrong_number(number):
    num_str = str(number)
    num_digits = len(num_str)
    digit_sum = sum(int(digit) ** num_digits for digit in num_str)
    return digit_sum == number
print(is_armstrong_number(4))

Calculate the power of a number using recursion.

def power(x, y):
    if y == 0:
        return 1
    else:
        return x * power(x, y - 1)
print(power(4,2))

Implement a program to find the roots of a cubic equation.
Create a program to find the factorial of a number without using recursion.

n = int(input("Enter a number: "))
factorial = 1

while n > 0:
    factorial *= n
    n -= 1

print("Factorial of the number is:", factorial)

Implement a program to check if a number is a palindrome.

import math

def reverse_number(num):
    return int(num != 0) and ((num % 10) * (10 ** int(math.log(num, 10))) + reverse_number(num // 10))

num = int(input("Enter an integer: "))
if num == reverse_number(num):
    print(f"{num} is a palindrome.")
else:
    print(f"{num} is not a palindrome.")

Use a generator function to generate the Fibonacci series.

def fibonacci_generator(n):
    a, b = 0, 1
    for i in range(n):
        yield a
        a, b = b, a + b
print( list(fibonacci_generator(5)))